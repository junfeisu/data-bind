'use strict';

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var priority = {
  'sjf-if': 2000,
  'sjf-show': 2000,
  'sjf-for': 1000,
  'sjf-model': 10,
  'sjf-text': 1
};

var sjfEvents = ['sjf-click', 'sjf-mouseover', 'sjf-mouseout', 'sjf-mousemove', 'sjf-mouseenter', 'sjf-mouseleave', 'sjf-mousedown', 'sjf-mouseup'];

// traverse the DOM
var circleElement = function circleElement(parent, isFirst) {
  var _this = this;

  var child = parent.children;
  if (isFirst && !child.length) {
    link.call(this);
    return;
  }
  for (var i = 0; i < child.length; i++) {
    var node = child[i];
    if (!!node.children.length) {
      circleElement.call(this, node, false);
      this._uncompileNodes.push(node);
    } else {
      this._uncompileNodes.push(node);
      this._uncompileNodes.forEach(function (value) {
        compileNode.call(_this, value);
      });
      this._uncompileNodes = [];
    }
  }
  if (this._el.lastElementChild === child[child.length - 1]) {
    link.call(this);
  }
};

var compileNode = function compileNode(node) {
  var _this2 = this;

  var matchExpress = /sjf-.+=\".+\"|\{\{.+\}\}/;
  if (matchExpress.test(node.outerHTML || node.innerText)) {
    var directives = matchExpress.exec(node.outerHTML || node.innerText);
    directives.forEach(function (value) {
      var slices = value.split('=');
      if (sjfEvents.indexOf(slices[0]) >= 0) {
        node.removeAttribute(slices[0]);
        var eventType = _utils2.default.removePrefix(slices[0]);
        var eventFunc = _this2['_' + _utils2.default.removeBrackets(slices[1])];
        node.addEventListener(eventType, eventFunc, false);
      } else {
        if (/\{\{.+\}\}/.test(value)) {
          console.log(node.outerHTML);
          node.outerHTML = node.outerHTML.replace(matchExpress, "");
          slices[0] = slices[0].replace(/[\{\}]/g, "");
          _this2._unlinkNodes.push({ node: node, directive: 'sjf-text', expression: slices[0] });
        } else {
          node.removeAttribute(slices[0]);
          slices[1] = slices[1].replace(/\"/g, "");
          _this2._unlinkNodes.push({ node: node, directive: slices[0], expression: slices[1] });
        }
      }
    });
  }
};

// compile the sjf
var compile = function compile() {
  circleElement.bind(this)(this._el, true);
};

var linkRender = {
  'sjf-if': function sjfIf(value) {
    value.node.style.display = !!value.expression ? 'block!important' : 'none!important';
  },
  'sjf-show': function sjfShow(value) {
    value.node.style.display = !!value.expression ? 'block!important' : 'none!important';
  },
  'sjf-for': function sjfFor(value) {
    var expressionSlices = value.expression.split(/\s+/);
    if (typeof expressionSlices[2] !== 'number' && this._data.hasOwnProperty(expressionSlices[2])) {
      this._watchers.push(this._data[expressionSlices[2]]);
    }
    for (var i = 0; i < this._data[expressionSlices[2]].length; i++) {
      var clonedNode = value.node.cloneNode(true);
      value.node.parentElement.insertBefore(clonedNode, value.node);
    }
  },
  'sjf-text': function sjfText(value) {
    this.innerText = this._data[value.expression];
  }
};

var link = function link() {
  var self = this;
  if (!!self._unlinkNodes.length) {
    var executeQueue = _utils2.default.sortExexuteQueue('directive', self._unlinkNodes);
    executeQueue.forEach(function (value) {
      linkRender[value.directive].bind(self)(value);
    });
  }
  console.log(this);
};

function sjfDataBind(param) {
  if (!param.hasOwnProperty('el') || !param.hasOwnProperty('data')) {
    console.error('sjf[error]: There is need `data` and `el` attribute');
    return;
  }
  this._el = document.querySelector(param.el);
  this._data = param.data;
  this._watchers = [];
  this._uncompileNodes = [];
  this._unlinkNodes = [];
  for (var method in param.methods) {
    this['_' + method] = param.methods[method].bind(this);
  }
  compile.call(this);
}

module.exports = sjfDataBind;